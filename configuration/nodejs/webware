#!/bin/bash
#
# chkconfig: 345 99 05
# description: webware deamon script
#
# A non-SUSE Linux start/stop script for webware daemons.
#
# Derived from http://www.source-code.biz
#######################################################

#configuration:
export LC_ALL=en_US.UTF-8

serviceName="webware"
# OS user name for the service
serviceUser="nginx"
# OS group name for the service
serviceGroup="nginx"
# home directory of the service application,where your main app.js located.NO Slash at the end.
appDir="/var/www/webware/src/nodejs"
# log directory for StdOut/StdErr.NO Slash at the end.
logDir="/var/log/webware"
# directory of PID file (PID = process ID number).NO Slash at the end.
pidDir="/var/run/webware"
# directory of sock file.NO Slash at the end. This configuration is relative with NGINX configuration.please see upstream_nodejs_unix.conf
sockDir="/var/run/webware"
# maximum seconds waitting for the daemon to terminate gracefully.
maxShutdownTime=15
# maximum seconds waitting for the daemon to startup.
maxStartTime=2
# maximum seconds waitting for the daemon to terminate forcelly.
killWaitTime=15
# flag to clear all log before restart. If you want to clear,simple assign an empty value to it.
#logFlags="-a"
logFlags=""

#to avoid alias and env fault.
nproc=`which --skip-alias nproc`
daemonize=`which --skip-alias daemonize`
rm=`which --skip-alias rm`
touch=`which --skip-alias touch`
chgrp=`which --skip-alias chgrp`
chmod=`which --skip-alias chmod`
node=`which --skip-alias node`
sudo=`which --skip-alias sudo`
kill=`which --skip-alias kill`

# Makes the file $1 writable by the group $serviceGroup.
function makeFileWritable {
  local filename="$1"
  $touch $filename || return 1
  $chgrp $serviceGroup $filename || return 1
  $chmod g+w $filename || return 1
  return 0;
}

# Returns 0 if the process with PID $1 is running.
function checkProcessIsRunning {
  local pid="$1"
  if [ -z "$pid" -o "$pid" == " " ]; then return 1; fi
  if [ ! -e /proc/$pid ]; then return 1; fi
  return 0;
}


# Returns 0 when the service is running and sets the variable $pid to the PID.
function getServicePID {
  pidFile=${pidDir}/webware-${1}.pid
#  echo -n "$pidFile:"
  if [ ! -f $pidFile ]; then return 1; fi
  pid="$(<$pidFile)"
  checkProcessIsRunning $pid || return 1
#  checkProcessIsOurService $pid || return 1
  return 0;
}

function checkServiceStatusImpl {
  echo -n "Checking for ${serviceName} ${1}:"
  if getServicePID ${1}; then
    echo "running PID=$pid"
    RETVAL=0
  else
    echo "stopped"
    RETVAL=3
  fi
}


function checkServiceStatus {
  cpu=`$nproc`
  local i;
  for (( i=1; i<=$cpu; i++ )) do
    checkServiceStatusImpl ${i}
  done
#   checkServiceStatusImpl "bkp"
  return 0;
}

function startServiceProcess {
  cd $appDir || return 1
  local pidFile=${pidDir}/webware-${1}.pid
  local stdoutFile=${logDir}/webware-${1}.stdout.log
  local stderrFile=${logDir}/webware-${1}.stderr.log
  local sockFile=${sockDir}/webware-${1}.sock
  $rm -f $pidFile
  $rm -f $sockFile
  makeFileWritable $pidFile || return 1
  makeFileWritable $stdoutFile || return 1
  makeFileWritable $stderrFile || return 1

  cmd="$daemonize $logFlags -c $appDir -o $stdoutFile -e $stderrFile -p $pidFile $node app.js ${sockFile}"
  #echo $cmd
  $sudo -u $serviceUser $cmd || return 1

  local i;
  for ((i=0; i<$maxStartTime*10; i++))
  do
    pid="$(<$pidFile)"
    if checkProcessIsRunning $pid; then
      return 0
    fi
    sleep 0.1
  done
  echo -ne "\n$serviceName start failed, see logfile."
  return 1
}

function startServiceImpl {
  getServicePID ${1}
  if [ $? -eq 0 ]; then echo "${serviceName}-${1} is already running"; return; fi
  echo -n "Starting ${serviceName}-${1}  "
  startServiceProcess ${1}
  if [ $? -ne 0 ]; then
    echo "failed"
    continue
  else
    echo "started PID=$pid"
  fi
}

function startService {
  cpu=`$nproc`
  local i;
  for (( i=1; i<=$cpu; i++ ))
  do
    startServiceImpl ${i}
  done
# startServiceImpl "bkp"
  RETVAL=0
  return 0;
}

function stopServiceProcess {
  local pid=$1
  local pidFile=$2

  $kill -s SIGINT $pid || return 1
  local i;
  for ((i=0; i<maxShutdownTime*10; i++)); do
      checkProcessIsRunning $pid
      if [ $? -ne 0 ]; then
         $rm -f $pidFile
         return 0
      fi
      sleep 0.1
  done
  echo -e "\nDaemon did not terminate within $maxShutdownTime seconds, sending SIGKILL..."
  $kill -s KILL $pid || return 1
  for ((i=0; i<killWaitTime*10; i++)); do
    checkProcessIsRunning $pid
    if [ $? -ne 0 ]; then
      rm -f $pidFile
      return 0
    fi
    sleep 0.1
  done
  echo "Error: process($PID) could not be stopped within $maxShutdownTime+$killWaitTime seconds!"
  return 1;
}


function stopServiceImpl {
  getServicePID ${1}
  if [ $? -ne 0 ]; then echo "${serviceName}-${1} is not running"; return ; fi
  local lpid=$pid;
  local lpidFile=$pidFile
  echo -n "Stopping ${serviceName}-${1}   "
  stopServiceProcess $lpid $lpidFile
  if [ $? -ne 0 ]; then echo "failed"; return ; fi
  echo "stopped PID=$lpid"
}

function stopService {
  cpu=`$nproc`
  local i;
  for ((i=1; i<=$cpu; i++))
  do
    stopServiceImpl ${i}
  done
#  stopServiceImpl "bkp"
  RETVAL=0
  return 0;
}



function main {
   RETVAL=0
   case "$1" in
      start)                                               # starts the Java program as a Linux service
         startService
         ;;
      stop)                                                # stops the Java program service
         stopService
         ;;
      restart)                                             # stops and restarts the service
         stopService && startService
         ;;
      status)                                              # displays the service status
         checkServiceStatus
         ;;
      *)
         echo "Usage: $0 {start|stop|restart|status}"
         exit 1
         ;;
      esac
   exit $RETVAL
}

main $1
